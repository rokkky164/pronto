"""
Django settings for pronto project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import environ
import os, sys
import sentry_sdk
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from celery.schedules import crontab
from django.utils import timezone
from sentry_sdk.integrations.django import DjangoIntegration


env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    DEBUG_SQL=(bool, False),
    ENVIRONMENT=(str, 'local'),
)
ENVIRONMENT = env('ENVIRONMENT')
DD_ENVIRONMENT = env('DD_ENVIRONMENT', default='prod')
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-in%twu1$pc()je&1-=l07=1fc4@wmp4h)w(m!0qi!r7e$g9$3d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
DEVELOPMENT_MODE = env("DEVELOPMENT_MODE", default="False") == "True"
ALLOWED_HOSTS = env('ALLOWED_HOSTS', default='127.0.0.1,localhost').split(',')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    # developed apps
    'accounts',
    'authorization',
    'catalog',
    'common',
    'common.location',
    'notification',
    'utils',
    # 3rd party apps
    'corsheaders'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pronto.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pronto.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


if DEVELOPMENT_MODE is True:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'pronto',
            'USER': 'postgres',
            'PASSWORD': 'pwd',
            'HOST': 'localhost'
        }
    }
elif len(sys.argv) > 0 and sys.argv[1] != 'collectstatic':
    if os.getenv("DATABASE_URL", None) is None:
        raise Exception("DATABASE_URL environment variable not defined")
    DATABASES = {
        "default": dj_database_url.parse(os.environ.get("DATABASE_URL")),
    }
    # postgresql://USER:PASSWORD@HOST:PORT/NAME
    
# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/api/static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_URL = '/api/media/'
MEDIA_URL = '/media/'
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.User'

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "https://www.tradepronto.com"
]

CORS_ORIGIN_ALLOW_ALL = True

DEFAULT_FROM_EMAIL = "roshan@pinakasolutions.com"
SERVER_EMAIL = "roshan@pinakasolutions.com"
BACK_END_HOST = env('BACK_END_HOST', default='https://tradepronto.com/api')
URL_PREFIX = env('URL_PREFIX', default='https://')
RESEND_NOTIFICATION_EMAIL_TIME = int(env('RESEND_NOTIFICATION_EMAIL_TIME', default=5))  # Minutes
DELETE_USER_ACCOUNT_DAYS = int(env('DELETE_USER_ACCOUNT_DAYS', default=7))  # Minutes
DELETE_ACCOUNT_REQUEST_HOURS = int(env('DELETE_ACCOUNT_REQUEST_HOURS', default=1)) # Hours

# Email Settings
ANYMAIL = {
    "MAILGUN_API_KEY": env('MAILGUN_API_KEY'),
    "MAILGUN_SENDER_DOMAIN": 'pinakasolutions.com',
}
if ENVIRONMENT == 'local':
    # Log email to console for local development
    # EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        'accounts.permissions.IsActive'
    ],
    'EXCEPTION_HANDLER': 'pronto.exception_handler.custom_exception_handler',
    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning'
}

# Product Image Settings

IMAGE_MIME_TYPES = ['image/jpeg', 'image/jpg', 'image/png']
MAX_PRODUCT_IMAGE_SIZE = 10000000  # 10 MB