# Generated by Django 4.0.7 on 2024-10-17 14:34

import accounts.utils
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('location', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=40, validators=[django.core.validators.RegexValidator(message='First Name can only contain letters & non-repeating special characters dot, quote and hyphen', regex="^(?!.*[.'-]{2})[a-zA-Z][a-zA-Z'.-]*[a-zA-Z]$"), django.core.validators.MinLengthValidator(limit_value=2, message='Minimum 2 characters are required'), django.core.validators.MaxLengthValidator(limit_value=40, message='Maximum 40 characters are allowed')], verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Last Name can only contain letters, spaces & non-repeating special characters dot, quote and hyphen', regex="^(?!.*[.'-]{2})[a-zA-Z]([a-zA-Z '.-]*[a-zA-Z])?$"), django.core.validators.MaxLengthValidator(limit_value=50, message='Maximum 50 characters are allowed')], verbose_name='Last Name')),
                ('auth_code', models.CharField(blank=True, max_length=8, null=True, verbose_name='Auth Code')),
                ('gender', models.CharField(blank=True, choices=[(None, 'Unknown'), ('MALE', 'MALE'), ('FEMALE', 'FEMALE')], max_length=6, null=True, verbose_name='Gender')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=accounts.utils.user_directory_path, verbose_name='Photo')),
                ('dob', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('mobile_number', models.CharField(blank=True, max_length=14, null=True, verbose_name='Mobile Number')),
                ('has_completed_profile', models.BooleanField(default=False, verbose_name='Has Completed Profile')),
                ('avatar', models.CharField(blank=True, max_length=200, null=True, verbose_name='Avtar')),
                ('thumbnail', models.CharField(blank=True, max_length=200, null=True, verbose_name='Avtar Thumbnail')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'ordering': ['-id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CertificateDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('PAN', 'Permanent Account Number'), ('CIN', 'Corporate Identification Number'), ('TAN', 'Tax Deduction Account Number'), ('GSTIN', 'Goods & Services Tax Identification Number')], max_length=50, verbose_name='Name')),
                ('document_no', models.CharField(blank=True, max_length=50, null=True, verbose_name='Document Number')),
                ('document', models.FileField(blank=True, null=True, upload_to='', validators=[accounts.utils.verify_document_mime_type, accounts.utils.verify_document_size])),
                ('status', models.CharField(choices=[('S', 'Saved'), ('AR', 'Approval Requested'), ('A', 'Approved'), ('R', 'Rejected')], default='S', max_length=50, verbose_name='Status')),
            ],
        ),
        migrations.CreateModel(
            name='CompanyInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Company Name')),
                ('tax_id', models.CharField(max_length=100, verbose_name='Tax Identification Number')),
                ('annual_turnover', models.CharField(choices=[('TILL_5M', '0-5M'), ('FIVEM_TO_TWENTYM', '5M-20M'), ('TWENTYM_TO_HUNDREDM', '20M-100M'), ('HUNDREDM_TO_ONEBILLION', '100M-1B'), ('ONEBILLION_PLUS', '1B+')], max_length=50, verbose_name='Annual Turnover')),
                ('hq_location', models.CharField(max_length=50, verbose_name='Headquarter Location')),
                ('company_type', models.CharField(max_length=100, verbose_name='Company Type')),
                ('other_hubs', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=list, null=True, size=None)),
                ('product_categories', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=list, null=True, size=None)),
                ('vat_payer', models.CharField(max_length=100, verbose_name='Vat Payer')),
                ('legal_address', models.CharField(max_length=255, verbose_name='Legal Address')),
            ],
        ),
        migrations.CreateModel(
            name='DeleteUserAccountRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.UUIDField(blank=True, default=uuid.uuid4, null=True, unique=True)),
                ('reason', models.TextField(blank=True, null=True, verbose_name='Delete reason')),
                ('is_logged_in', models.BooleanField(default=False, verbose_name='Is user logged in)')),
                ('is_account_deleted', models.BooleanField(default=False, verbose_name='Is account deleted')),
                ('requested_at', models.DateTimeField(auto_now_add=True, verbose_name='Requested at')),
                ('confirm_at', models.DateTimeField(blank=True, null=True, verbose_name='Confirm At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='delete_requests', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_line_1', models.CharField(blank=True, max_length=50, null=True, verbose_name='Address Line 1')),
                ('address_line_2', models.CharField(blank=True, max_length=50, null=True, verbose_name='Address Line 2')),
                ('pincode', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(9999999999)], verbose_name='Pin Code')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='location.city')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='location.country')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='location.state')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='address', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AccountManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('department', models.CharField(max_length=100, verbose_name='Department')),
                ('company_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.companyinformation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
